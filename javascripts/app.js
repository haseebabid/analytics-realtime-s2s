// Generated by CoffeeScript 2.4.1
(function() {
  var DEVICES, SCOPES, analytics, app, authorize, express, http, https, io, jwtClient, key, makeRequests, path, port, server, JWT;

  DEVICES = 1000 * 15; // Only call the API once every 15 seconds.

  path = require('path');

  var { google } = require('googleapis');

  key = require('/home/haseeb/Documents/rtgoogle/rt-dash/config/analytics.json'); // This is the key Google Developer has you download upon service account creation.

  express = require('express');

  JWT = require('jsonwebtoken');

  http = require('http');

  https = require('https');

  analytics = google.analytics;

  app = express();

  server = http.createServer(app);

  //io = require('socket.io')(server); // We don't want users to have to refresh the dashboard for data updates.

  port = process.env.PORT || 3000;

  app.use('/static', express.static(path.join(__dirname, 'node_modules')));

  app.get('/dashboard', function(req, res) {
    return res.sendFile(path.join(__dirname, 'dashboard.html'));
  });

  SCOPES = ['https://www.googleapis.com/auth/analytics.readonly'


];

  jwtClient = new google.auth.JWT(key.client_email, null, key.private_key, SCOPES, null);

  authorize = function(metric, dimension, next) {
    return jwtClient.authorize(function(err, tokens) {
      var request;
      if (err) {
        console.error(err);
        next(err);
      }
      request = analytics.data.get({
        'auth': jwtClient,
        'ids': 'ga:207711148',
        'metrics': metric,
        'dimensions': dimension,
        'output': 'json'
      });
      return next('https://' + request.host + request.path + '&access_token=' + jwtClient.gtoken.raw_token.access_token);
    });
  };

  makeRequests = function(url, next) {
    return https.get(url, function(response) {
      var buffer;
      buffer = '';
      response.on('data', function(chunk) {
        return buffer += chunk;
      });
      return response.on('end', function(err) {
        return next(JSON.parse(buffer));
      });
    });
  };

  setInterval(authorize, DEVICES, 'rt:activeUsers', 'rt:deviceCategory', function(response) {
    return makeRequests(response, function(data) {
      return io.emit('devices', {
        data: data
      });
    });
  });

  server.listen(port, function() {
    return console.log(`Listening on port ${port}`);
  });

}).call(this);



